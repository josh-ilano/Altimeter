package com.example.sensorevents

import android.hardware.Sensor
import android.hardware.SensorEvent
import android.hardware.SensorEventListener
import android.hardware.SensorManager
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.sensorevents.ui.theme.SensorEventsTheme
import kotlin.math.pow

class MainActivity : ComponentActivity(), SensorEventListener {

    private lateinit var sensorManager: SensorManager
    private var pressure: Sensor? = null


    private var _x by mutableStateOf(0f)
    private var _accuracy by mutableStateOf("Unknown")

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        // Initialize Sensor Manager
        sensorManager = getSystemService(SENSOR_SERVICE) as SensorManager
        pressure = sensorManager.getDefaultSensor(Sensor.TYPE_PRESSURE)

        setContent {
            SensorEventsTheme {
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.background
                ) {
                    SensorScreen(x = _x, accuracy = _accuracy)
                }
            }
        }
    }

    override fun onResume() {
        super.onResume()
        pressure?.let {
            sensorManager.registerListener(this, it, SensorManager.SENSOR_DELAY_UI)
        }
    }

    override fun onPause() {
        super.onPause()
        sensorManager.unregisterListener(this)
    }

    override fun onSensorChanged(event: SensorEvent?) {
        event?.let {
            _x = it.values[0]
        }
    }

    override fun onAccuracyChanged(sensor: Sensor?, accuracy: Int) {
        _accuracy = when (accuracy) {
            SensorManager.SENSOR_STATUS_ACCURACY_HIGH -> "High"
            SensorManager.SENSOR_STATUS_ACCURACY_MEDIUM -> "Medium"
            SensorManager.SENSOR_STATUS_ACCURACY_LOW -> "Low"
            SensorManager.SENSOR_STATUS_UNRELIABLE -> "Unreliable"
            else -> "Unknown"
        }
    }
}

fun CalculateHeight(x: Float): Float {
    val p0: Float = 1013.25f
    return 44330 * (1 - (x/p0).pow(1/5.255f))
}

// Generated by Chat-GPT, maps the values from somewhere between 0 and 255
fun mapHeightToByte(h: Float): Double {
    val minHeight = -698.42
    val maxHeight = 44330.0
    val mapped = 255 * (h - maxHeight) / (minHeight - maxHeight)
    return mapped.coerceIn(0.0, 255.0) // Ensures the result is within 0-255
}


@Composable
fun SensorScreen(x: Float, accuracy: String) {

    /**
     *   Based on the limit from 0 to 1100 hPa
     *   In other words, from 44330 meters to -698.42 meters
      */

    var height = CalculateHeight(x)
    var brightness = mapHeightToByte(height).toFloat() / 255
    // we used constructor that only goes from 0-1, so we divide by 255

    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(brightness,brightness,brightness,1f))
            .padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        Text(text = "Pressure Data", fontSize = 24.sp, fontWeight = FontWeight.Bold, color = Color.DarkGray)

        Spacer(modifier = Modifier.height(16.dp))

        SensorValue(label = "Pressure", value = x, unit = "hPa")
        SensorValue(label = "Height", value = height, unit = "meters")

        Spacer(modifier = Modifier.height(16.dp))

        Text(text = "Sensor Accuracy: $accuracy", fontSize = 18.sp, fontWeight = FontWeight.Bold, color = Color.Red)
    }
}

@Composable
fun SensorValue(label: String, value: Float, unit: String) {
    Text(
        text = "$label: ${"%.2f".format(value)} $unit",
        fontSize = 18.sp,
        fontWeight = FontWeight.Medium,
        color = Color.DarkGray
    )
}

@Preview(showBackground = true)
@Composable
fun DefaultPreview() {
    SensorEventsTheme {
        SensorScreen(x = 0f, accuracy = "Unknown")
    }
}